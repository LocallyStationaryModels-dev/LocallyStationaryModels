par(ask=TRUE)
p <- ggplot(allpoints, aes(x=X, y=Y, color=allpoints[,i])) + geom_point() + scale_color_gradientn(colours = rainbow(5)) + coord_fixed() + theme_light()
print(p)
}
}
plot.parameters(mypoints)
plot.parameters<-function(allpoints)
{
###PARAMETERS
for (i in 1:dim(allpoints)[2])
{
par(ask=TRUE)
p <- ggplot(allpoints, aes(x=X, y=Y, color=allpoints[,i])) + geom_point() + scale_color_gradientn(colours = rainbow(5)) + coord_fixed() + theme_light() + labs(color = colnames(allpoints)[i])
print(p)
}
}
plot.parameters(mypoints)
plot.parameters<-function(allpoints)
{
###PARAMETERS
for (i in 3:dim(allpoints)[2])
{
par(ask=TRUE)
p <- ggplot(allpoints, aes(x=X, y=Y, color=allpoints[,i])) + geom_point() + scale_color_gradientn(colours = rainbow(5)) + coord_fixed() + theme_light() + labs(color = colnames(allpoints)[i])
print(p)
}
}
plot.parameters(mypoints)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100))
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,30)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100))
# Find the solutions
solu<-findsolutions.lsm(vario, "esponenziale", c(200,200,0.01,100))
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100))
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,0.5))
solu$solutions
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100))
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100))
mypoints<-plot.lsm(solu,a,ynew,dnew)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "esponenziale", c(200,200,0.01,100))
mypoints<-plot.lsm(solu,a,ynew,dnew)
# Clean the environment
rm(list = ls())
# Install and compile the package
install.packages("devtools")
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Only for meuse dataset
# Load the data
data(meuse)
d<- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
head(d)
head(y)
# Find anchorpoints
a<-find_anchorpoints.lsm(dataset = d,n = 12)
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 450,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Plot the segments
plotgrid(d = d,grid = vario$grid,index = 3)
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
solumatern<-findsolutions.lsm(vario = vario, id = "matern", initial.position = c(200,200,0.01,100,10)) #lambda1,lambda2,phi,sigma,nu
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solumatern,a = a,y = y,d = d)
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
previsions <- predict.lsm(sol = solu,newpos =  d, y = y,d =  d)
max(abs(previsions$ypredicted - y))
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,30)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100))
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,30)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
solu$solutions
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
mypoints<-plot.lsm(solu,a,ynew,dnew)
library(LocallyStationaryModels)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,30)
find_anchorpoints(dnew, 12)
library(LocallyStationaryModels)
a<-find_anchorpoints.lsm(dnew,30)
a<-find_anchorpoints.lsm(dnew,30)
a<-find_anchorpoints.lsm(dnew,30)
a<-find_anchorpoints.lsm(dnew,30)
a<-find_anchorpoints.lsm(dnew,30)
a<-find_anchorpoints.lsm(dnew,12)
a<-find_anchorpoints.lsm(dnew,4)
a<-find_anchorpoints.lsm(dnew,9)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Only for meuse dataset
# Load the data
data(meuse)
d<- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
head(d)
head(y)
# Find anchorpoints
a<-find_anchorpoints.lsm(dataset = d,n = 12)
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 450,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
solumatern<-findsolutions.lsm(vario = vario, id = "matern", initial.position = c(200,200,0.01,100,10)) #lambda1,lambda2,phi,sigma,nu
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
mypoints<-plot.lsm(model = solumatern,a = a,y = y,d = d)
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solumatern,a = a,y = y,d = d)
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
mypoints
library(LocallyStationaryModels)
# Find anchorpoints
a<-find_anchorpoints.lsm(dataset = d,n = 12)
library(LocallyStationaryModels)
# Find anchorpoints
a<-find_anchorpoints.lsm(dataset = d,n = 12)
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 450,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
previsions <- predict.lsm(sol = solu,newpos =  d, y = y,d =  d)
max(abs(previsions$ypredicted - y))
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
test <- cbind(1000000, 1000000)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
previsiontest
test <- cbind(181000, 330000)
previsiontest
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
previsiontest
library(LocallyStationaryModels)
test <- cbind(181000, 330000)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
test <- cbind(181000, 330000)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
test <- cbind(181000, 330000)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
test <- cbind(181000, 330000)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
test <- cbind(181000, 330000)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
# Clean the environment
rm(list = ls())
# Install and compile the package
install.packages("devtools")
library(devtools)
devtools::install_github("giacomodecarlo/LocallyStationaryModels")
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Only for meuse dataset
# Load the data
data(meuse)
d<- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
head(d)
head(y)
# Find anchorpoints
a<-find_anchorpoints.lsm(dataset = d,n = 12)
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 450,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Plot the segments
plotgrid(d = d,grid = vario$grid,index = 3)
#Plot the anisotropic empiric variogram
plotvario(n_angles = 8,n_intervals = 8,vario$empiricvariogram,pos=22,epsilon = vario$epsilon)
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 450,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Plot the segments
plotgrid(d = d,grid = vario$grid,index = 3)
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
test <- cbind(181000, 330000)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
library(LocallyStationaryModels)
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Only for meuse dataset
# Load the data
data(meuse)
d<- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
head(d)
head(y)
# Find anchorpoints
a<-find_anchorpoints.lsm(dataset = d,n = 12)
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 350,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
test <- cbind(181000, 330000)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
library(LocallyStationaryModels)
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Only for meuse dataset
# Load the data
data(meuse)
d<- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
head(d)
head(y)
# Find anchorpoints
a<-find_anchorpoints.lsm(dataset = d,n = 12)
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 350,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 450,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
test <- cbind(181000, 330000)
previsiontest <- predict.lsm(sol = solu, newpos = test, y = y, d = d)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Only for meuse dataset
# Load the data
data(meuse)
d<- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
head(d)
head(y)
# Find anchorpoints
a<-find_anchorpoints.lsm(dataset = d,n = 12)
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 450,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
solumatern<-findsolutions.lsm(vario = vario, id = "matern", initial.position = c(200,200,0.01,100,10)) #lambda1,lambda2,phi,sigma,nu
mypoints<-plot.lsm(model = solumatern,a = a,y = y,d = d)
library(LocallyStationaryModels)
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 450,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
solumatern<-findsolutions.lsm(vario = vario, id = "matern", initial.position = c(200,200,0.01,100,10)) #lambda1,lambda2,phi,sigma,nu
mypoints<-plot.lsm(model = solumatern,a = a,y = y,d = d)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,30)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100))
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
solu$solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
detach(LocallyStationaryModels)
detach("package:LocallyStationaryModels", unload=TRUE)
library(LocallyStationaryModels)
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,30)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100,10))
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Load the libraries
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
library(LocallyStationaryModels)
mypoints<-plot.lsm(solu,a,ynew,dnew)
