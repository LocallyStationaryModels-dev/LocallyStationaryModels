coordinates <- cbind(X, Y)
f <- sic.all$data
# Find anchorpoints
anchorpoints <- find_anchorpoints.lsm(coordinates, 12)
# Build the empiric variogram
variogram <- variogram.lsm(f, coordinates, anchorpoints$anchorpoints, 600, 4, 4, "gaussian")
# Find the solutions
solutions <- findsolutions.lsm(variogram, "exponential", c(30,100,0.01,100))
previsions <- predict.lsm(solutions, coordinates, f, coordinates)
previsions <- predict.lsm(solutions, coordinates, f, coordinates, 2)
library(LocallyStationaryModels)
previsions <- predict.lsm(solutions, coordinates, f, coordinates,2)
library(LocallyStationaryModels)
previsions <- predict.lsm(solutions, coordinates, f, coordinates, 1)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100), c(1e-8,1e-8,1e-8,1e-8), c(Inf, Inf, pi/2, Inf))
# Plot of the solutions
x11()
previsions <- predict.lsm(solu, d, y, d)
previsions <- predict.lsm(solu, d, y, d, 1)
previsions <- predict.lsm(solu, d, y, d, 10)
previsions <- predict.lsm(solu, d, y, d)
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d, y, d)
previsions <- predict.lsm(solu, d, y, d, 2)
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d, y, d, n_threads = 2)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
# Test the performace of our model via cross-validation
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
load("C:/Users/Giacomo/Desktop/PACS/SIC.rda")
y<-sic.all$data
V1<-as.numeric(sic.all$coords[,1])
V2<-as.numeric(sic.all$coords[,2])
d <- cbind(V1, V2)
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,35,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(20,20,0.01,100))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(20,20,0.01,100),upper.bound = c(300,300,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.01,100),upper.bound = c(300,300,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(300,300,pi/2,Inf))
solu
plotvario(8,8,vario$empiricvariogram,5,46)
sqrt(2000)
plotvario(8,8,vario$empiricvariogram,5,46)
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(100,100,0.51,100),upper.bound = c(300,300,pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "gaussian", c(100,100,0.51,100),upper.bound = c(300,300,pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "gaussian", c(50,50,0.51,100),upper.bound = c(300,300,pi/2,Inf))
solu
# Find anchorpoints
a <- find_anchorpoints.lsm(d,8)
vario <- variogram.lsm(y,d,a$anchorpoints,35,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "gaussian", c(50,50,0.51,100),upper.bound = c(300,300,pi/2,Inf))
solu
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario, "gaussian", c(50,50,0.51,100),upper.bound = c(300,300,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(300,300,pi/2,Inf))
solu
library(LocallyStationaryModels)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,35,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(300,300,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(500,500,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,500,0.51,100),upper.bound = c(500,500,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,500,0.51,100),upper.bound = c(500,100,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,80,0.51,100),upper.bound = c(500,100,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(500,100,pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(500,46sqrt(2),pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(500,46*sqrt(2),pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(10,46*sqrt(2),pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(20,46*sqrt(2),pi/2,Inf))
solu
plotvario(8,8,vario$empiricvariogram,9,46)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,46,16,50,"gaussian")
plotvario(16,50,vario$empiricvariogram,9,46)
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(20,46*sqrt(2),pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(200,100*sqrt(2),pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(200,2000,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(2000,2000,pi/2,Inf))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(1000,1000,pi/2,Inf))
solu
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,46,32,15,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(1000,1000,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(80,80,0.51,100),upper.bound = c(200,200,pi/2,250))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,200,0.51,100),upper.bound = c(200,200,pi/2,250))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,150,0.51,100),upper.bound = c(200,200,pi/2,250))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,190,0.51,100),upper.bound = c(200,200,pi/2,250))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,190,0.51,100),upper.bound = c(200,200,pi/2,250))
solu
library(LocallyStationaryModels)
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
y<-sic.all$data
V1<-as.numeric(sic.all$coords[,1])
V2<-as.numeric(sic.all$coords[,2])
d <- cbind(V1, V2)
# Find anchorpoints
a <- find_anchorpoints.lsm(d,8)
vario <- variogram.lsm(y,d,a$anchorpoints,46,32,15,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,190,0.51,100),upper.bound = c(200,200,pi/2,250))
# Find anchorpoints
a <- find_anchorpoints.lsm(d,8)
vario <- variogram.lsm(y,d,a$anchorpoints,46,32,15,"gaussian")
y<-sic.all$data
V1<-as.numeric(sic.all$coords[,1])
V2<-as.numeric(sic.all$coords[,2])
load("C:/Users/Giacomo/Desktop/PACS/SIC.rda")
y<-sic.all$data
V1<-as.numeric(sic.all$coords[,1])
V2<-as.numeric(sic.all$coords[,2])
d <- cbind(V1, V2)
# Find anchorpoints
a <- find_anchorpoints.lsm(d,8)
vario <- variogram.lsm(y,d,a$anchorpoints,46,32,15,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,190,0.51,100),upper.bound = c(200,200,pi/2,250))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,190,0.51,100),upper.bound = c(Inf,Inf,pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(Inf,Inf,pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(200,200,pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(Inf,Inf,pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "gaussian", c(50,50,0.51,100),upper.bound = c(Inf,Inf,pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(Inf,Inf,pi/2,Inf))
solu
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(46*3*sqrt(2),46*3*sqrt(2),pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(100,100,pi/2,Inf))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(100,100,pi/2,250))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(500,500,pi/2,250))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(1000,1000,pi/2,250))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(1000,200,pi/2,250))
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(50,50,0.51,100),upper.bound = c(200,200,pi/2,250))
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
sions
max(previsions$ypredicted - y)
# Test the performace of our model via cross-validation
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
y<-sic.all$data
# Load the data
load("C:/Users/luca9/Downloads/SIC.rda")
y<-sic.all$data
V1<-as.numeric(sic.all$coords[,1])
V2<-as.numeric(sic.all$coords[,2])
d <- cbind(V1, V2)
# Find anchorpoints
a <- find_anchorpoints.lsm(d,8)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,46*2,6,15,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(20,100,0.51,100),upper.bound = c(Inf,Inf,pi/2,250))
solu
plotvario(6,15,vario$empiricvariogram,34,46*2)
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random", n_threads = 4)
previsions <- predict.lsm(solu, d, y, d, n_threads = 4)
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
previsions <- predict.lsm(solu, d, y, d, n_threads = 10)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
# Plot of the solutions
x11()
previsions <- predict.lsm(solu, d, y, d, n_threads = 10)
previsions <- predict.lsm(solu, d, y, d, n_threads = 12)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d, n_threads = 12)
max(previsions$ypredicted - y)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
library(LocallyStationaryModels)
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
clear
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
x11()
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
