library(LocallyStationaryModels)
plot.parameters(mypoints)
library(LocallyStationaryModels)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
plot.parameters(mypoints)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find the solutions
solu<-findsolutions.lsm(vario, "gaussian", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
# Find the solutions
solu<-findsolutions.lsm(vario, "gaussian", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 4, points_arrangement = "straight")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 4, points_arrangement = "straight")
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 4, points_arrangement = "random")
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
help(plot.lsm)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
predict(solu, dnew, ynew, dnew)
predict.lsm<-function(sol, newpos, y, d, bool = TRUE)
{
predictedvalues <- predikt(y,d,sol$anchorpoints,sol$epsilon,sol$delta,sol$solutions,newpos,sol$id,sol$kernel_id)
if (bool)
{
newpos <- as.data.frame(newpos)
colnames(newpos) <- c("X", "Y")
means <- ggplot2::ggplot(newpos, ggplot2::aes(x=X, y=Y, color=predictedvalues$predictedmean)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed()
ys <- ggplot2::ggplot(newpos, ggplot2::aes(x=X, y=Y, color=predictedvalues$ypredicted)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed()
means<-means+ggplot2::labs(color="mean") + ggplot2::theme_light()
ys<-ys+ggplot2::labs(color="f(*)") + ggplot2::theme_light()
title <- cowplot::ggdraw() + cowplot::draw_label("Predicted mean and f(*)", fontface='bold')
p <- cowplot::plot_grid(means, ys)
print(cowplot::plot_grid(title, p, ncol=1, rel_heights=c(0.1, 1)))
}
return(predictedvalues)
}
predict(solu, dnew, ynew, dnew)
# Clean the environment
rm(list = ls())
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
previsions <- predict(solu, dnew, ynew, dnew)
previsions <- LocallyStationaryModels::predict(solu, dnew, ynew, dnew)
previsions <- lsm::predict(solu, dnew, ynew, dnew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
previsions
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
head(dnew)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
# Find anchorpoints
a<-find_anchorpoints.lsm(d,12)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$cadmium
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11()
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - ynew)
max(previsions$ypredicted - y)
# Test the performace of our model via cross-validation
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
library(LocallyStationaryModels)
library(LocallyStationaryModels)
packageDescription("LocallyStationaryModels")
library(LocallyStationaryModels)
packageDescription("LocallyStationaryModels")
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11()
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
packageDescription("LocallyStationaryModels")
library(LocallyStationaryModels)
packageDescription("LocallyStationaryModels")
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
library(LocallyStationaryModels)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11()
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
# Find the solutions
solu <- findsolutions.lsm(vario, "matern", c(200,200,0.01,1000, 10))
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,1000))
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu$solutions
y <- meuse$cadmium
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
solu$solutions
library(LocallyStationaryModels)
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
solu$solutions
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
solu$solutions
library(LocallyStationaryModels)
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01))
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01))
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
solu$solutions
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01))
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200))
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
solu$solutions
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "maternNuFixed 18", c(200,200,0.01,100))
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
# Find the solutions
solu <- findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
solu$solutions
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100,10))
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - y)
