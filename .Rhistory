rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(-meuse$x, -meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
mypoints<-plot.lsm(model = solu, a = a, z= y, d = d, n_points = 10, points_arrangement = "random")
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = FALSE)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = FALSE)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(-meuse$x, -meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "straight", bool = FALSE)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 4, points_arrangement = "straight", bool = FALSE)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 4, points_arrangement = "straight", bool = FALSE)
library(LocallyStationaryModels)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 4, points_arrangement = "straight", bool = FALSE)
library(LocallyStationaryModels)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 4, points_arrangement = "straight", bool = FALSE)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 6, points_arrangement = "straight", bool = FALSE)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 8, points_arrangement = "straight", bool = FALSE)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "straight", bool = FALSE)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
# Plot of the solutions
x11()
previsions <- predict.lsm(solu, d, y, d)
max(previsions$zpredicted - y)
#
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian",n_threads = 1)
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100),n_threads = 2)
previsions <- predict.lsm(solu, d, y, d, n_threads = 1)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian",n_threads = 12)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian",n_threads = 12)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = FALSE)
previsions <- predict.lsm(solu, d, y, d)
previsions <- predict.lsm(solu, d, y, d, n_threads = 12)
previsions <- predict.lsm(solu, d, y, d)
# Clean the environment
rm(list = ls())
library(LocallyStationaryModels)
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
mypoints
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
mypoints
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d, y, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d, y, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
packageVersion("LocallyStationaryModels")
packageDescription("LocallyStationaryModels")
library(LocallyStationaryModels)
library(LocallyStationaryModels)
help(findsolutions.lsm)
library(LocallyStationaryModels)
help(roxygen2::roxygenise)
help(roxygen2::roxygenize)
help(roxygenize)
help(document)
library(devtools)
help(document)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
library(LocallyStationaryModels)
devtools::document(LocallyStationaryModels)
devtools::document()
help(variogram.lsm)
library(LocallyStationaryModels)
devtools::document()
devtools::document()
?variogram.lsm
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d, y, d)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
previsions <- predict.lsm(solu, d, y, d)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
?find_anchorpoints.lsm
?findsolutions.lsm
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
