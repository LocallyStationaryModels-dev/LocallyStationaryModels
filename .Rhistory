}
colnames(newpoints)<-c("X","Y")
parameters<-smoothing(model$solutions,a$anchorpoints,model$delta,as.matrix(newpoints))
parameters<-as.data.frame(parameters)
colnames(parameters)<-c("lambda1", "lambda2", "phi", "sigma")
allpoints<-cbind(newpoints, parameters)
#allpoints<-rbind(g, newpos)
###DATI INIZIALI
dd <- as.data.frame(d)
#windows()
#p <- ggplot(dd, aes(x=V1, y=V2, color=y)) + geom_point() + scale_color_gradientn(colours = rainbow(5)) + coord_fixed()
#print(p)
par(ask=TRUE)
p <- ggplot2::ggplot(dd, ggplot2::aes(x=V1, y=V2, size=y)) + ggplot2::geom_point() + ggplot2::labs(x="X", y="Y")
p <- p + ggplot2::labs(title = "Bubble plot of the initial data", fontface = 'bold') + ggplot2::theme_light()
print(p)
###ELLISSI
ellissi<-g
ellissi$lambda2 <- ellissi$lambda2/(ellissi$lambda1/a$width)
ellissi$lambda1 <- a$width
p1 <- ggplot2::ggplot(ellissi, ggplot2::aes(x=X, y=Y)) + ggforce::geom_ellipse(ggplot2::aes(x0 = X, y0 = Y, a = lambda1, b = lambda2, angle = phi), data = ellissi) + ggplot2::coord_fixed() + ggplot2::theme_light()
p2 <- ggplot2::ggplot(ellissi, ggplot2::aes(x=X, y=Y)) + ggplot2::geom_segment(ggplot2::aes(x=X, y=Y, xend=X+lambda1*cos(phi), yend=Y+lambda1*sin(phi)), arrow = ggplot2::arrow(length = ggplot2::unit(2, "mm")), data = ellissi)
p2 <- p2 + ggplot2::geom_segment(ggplot2::aes(x=X, y=Y, xend=X-lambda1*cos(phi), yend=Y-lambda1*sin(phi)), arrow = ggplot2::arrow(length = ggplot2::unit(2, "mm")), data = ellissi) + ggplot2::coord_fixed() + ggplot2::theme_light()
print(cowplot::plot_grid(p1, p2))
###PARAMETERS
p1 <- ggplot2::ggplot(allpoints, ggplot2::aes(x=X, y=Y, color=lambda1)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed() + ggplot2::theme_light()
p2 <- ggplot2::ggplot(allpoints, ggplot2::aes(x=X, y=Y, color=lambda2)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed() + ggplot2::theme_light()
p3 <- ggplot2::ggplot(allpoints, ggplot2::aes(x=X, y=Y, color=phi)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed() + ggplot2::theme_light()
p4 <- ggplot2::ggplot(allpoints, ggplot2::aes(x=X, y=Y, color=sigma)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed() + ggplot2::theme_light()
title <- cowplot::ggdraw() + cowplot::draw_label("Parameters", fontface='bold')
p <- cowplot::plot_grid(p1,p2,p3,p4)
print(cowplot::plot_grid(title, p, ncol=1, rel_heights=c(0.1, 1)))
return(allpoints)
}
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Only for meuse dataset
# Load the data
data(meuse)
d<- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
head(d)
head(y)
# Find anchorpoints
a<-find_anchorpoints.lsm(dataset = d,n = 12)
# Build the empiric variogram
vario<-variogramlsm(y = y,d = d,anchorpoints = a$anchorpoints,epsilon = 450,n_angles = 8,n_intervals = 8,kernel_id = "gaussian")
# Find the parameters that minimize the nonlinear wls problem (anisotropy, variance and others)
solu<-findsolutions.lsm(vario = vario, id = "esponenziale", initial.position = c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
plot.lsm<-function(model, a, y, d, n_points = 10)
{
aa<-as.data.frame(a$anchorpoints)
colnames(aa)<-c("X","Y")
s<-model$solutions
s<-as.data.frame(s)
colnames(s)<-c("lambda1", "lambda2", "phi", "sigma")
g<-cbind(aa,s)
newpoints <- data.frame(X = double(), Y = double())
for (i in 1:dim(g)[1])
{
for (j in 1:n_points)
{
radius <- a$width*runif(1, min=0, max=1)
newpoints<-rbind(newpoints, c(g$X[i]+radius*cos(j*2*pi/n_points), g$Y[i]+radius*sin(j*2*pi/n_points)))
}
}
colnames(newpoints)<-c("X","Y")
parameters<-smoothing(model$solutions,a$anchorpoints,model$delta,as.matrix(newpoints))
parameters<-as.data.frame(parameters)
colnames(parameters)<-c("lambda1", "lambda2", "phi", "sigma")
allpoints<-cbind(newpoints, parameters)
#allpoints<-rbind(g, newpos)
###DATI INIZIALI
dd <- as.data.frame(d)
#windows()
#p <- ggplot(dd, aes(x=V1, y=V2, color=y)) + geom_point() + scale_color_gradientn(colours = rainbow(5)) + coord_fixed()
#print(p)
par(ask=TRUE)
p <- ggplot2::ggplot(dd, ggplot2::aes(x=V1, y=V2, size=y)) + ggplot2::geom_point() + ggplot2::labs(x="X", y="Y")
p <- p + ggplot2::labs(title = "Bubble plot of the initial data", fontface = 'bold') + ggplot2::theme_light()
print(p)
###ELLISSI
ellissi<-g
ellissi$lambda2 <- ellissi$lambda2/(ellissi$lambda1/a$width)
ellissi$lambda1 <- a$width
p1 <- ggplot2::ggplot(ellissi, ggplot2::aes(x=X, y=Y)) + ggforce::geom_ellipse(ggplot2::aes(x0 = X, y0 = Y, a = lambda1, b = lambda2, angle = phi), data = ellissi) + ggplot2::coord_fixed() + ggplot2::theme_light()
p2 <- ggplot2::ggplot(ellissi, ggplot2::aes(x=X, y=Y)) + ggplot2::geom_segment(ggplot2::aes(x=X, y=Y, xend=X+lambda1*cos(phi), yend=Y+lambda1*sin(phi)), arrow = ggplot2::arrow(length = ggplot2::unit(2, "mm")), data = ellissi)
p2 <- p2 + ggplot2::geom_segment(ggplot2::aes(x=X, y=Y, xend=X-lambda1*cos(phi), yend=Y-lambda1*sin(phi)), arrow = ggplot2::arrow(length = ggplot2::unit(2, "mm")), data = ellissi) + ggplot2::coord_fixed() + ggplot2::theme_light()
print(cowplot::plot_grid(p1, p2))
###PARAMETERS
p1 <- ggplot2::ggplot(allpoints, ggplot2::aes(x=X, y=Y, color=lambda1)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed() + ggplot2::theme_light()
p2 <- ggplot2::ggplot(allpoints, ggplot2::aes(x=X, y=Y, color=lambda2)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed() + ggplot2::theme_light()
p3 <- ggplot2::ggplot(allpoints, ggplot2::aes(x=X, y=Y, color=phi)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed() + ggplot2::theme_light()
p4 <- ggplot2::ggplot(allpoints, ggplot2::aes(x=X, y=Y, color=sigma)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed() + ggplot2::theme_light()
title <- cowplot::ggdraw() + cowplot::draw_label("Parameters", fontface='bold')
p <- cowplot::plot_grid(p1,p2,p3,p4)
print(cowplot::plot_grid(title, p, ncol=1, rel_heights=c(0.1, 1)))
return(allpoints)
}
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
mypoints<-plot.lsm(model = solu,a = a,y = y,d = d)
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(solu,a,ynew,dnew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
mypoints<-plot.lsm(solu,a,ynew,dnew)
help("set.seed")
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(solu,a,ynew,dnew)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogramlsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(solu,a,ynew,dnew)
library(LocallyStationaryModels)
plot.parameters(mypoints)
library(LocallyStationaryModels)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
plot.parameters(mypoints)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find the solutions
solu<-findsolutions.lsm(vario, "gaussian", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Find the solutions
solu<-findsolutions.lsm(vario, "matern", c(200,200,0.01,100,10))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
# Find the solutions
solu<-findsolutions.lsm(vario, "gaussian", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 4, points_arrangement = "straight")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 4, points_arrangement = "straight")
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 4, points_arrangement = "random")
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
help(plot.lsm)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
predict(solu, dnew, ynew, dnew)
predict.lsm<-function(sol, newpos, y, d, bool = TRUE)
{
predictedvalues <- predikt(y,d,sol$anchorpoints,sol$epsilon,sol$delta,sol$solutions,newpos,sol$id,sol$kernel_id)
if (bool)
{
newpos <- as.data.frame(newpos)
colnames(newpos) <- c("X", "Y")
means <- ggplot2::ggplot(newpos, ggplot2::aes(x=X, y=Y, color=predictedvalues$predictedmean)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed()
ys <- ggplot2::ggplot(newpos, ggplot2::aes(x=X, y=Y, color=predictedvalues$ypredicted)) + ggplot2::geom_point() + ggplot2::scale_color_gradientn(colours = rainbow(5)) + ggplot2::coord_fixed()
means<-means+ggplot2::labs(color="mean") + ggplot2::theme_light()
ys<-ys+ggplot2::labs(color="f(*)") + ggplot2::theme_light()
title <- cowplot::ggdraw() + cowplot::draw_label("Predicted mean and f(*)", fontface='bold')
p <- cowplot::plot_grid(means, ys)
print(cowplot::plot_grid(title, p, ncol=1, rel_heights=c(0.1, 1)))
}
return(predictedvalues)
}
predict(solu, dnew, ynew, dnew)
# Clean the environment
rm(list = ls())
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
previsions <- predict(solu, dnew, ynew, dnew)
previsions <- LocallyStationaryModels::predict(solu, dnew, ynew, dnew)
previsions <- lsm::predict(solu, dnew, ynew, dnew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$elev
# Delete problematic data points
dnew=(d[!(d[,1]>180000&d[,2]<330500),])
ynew=y[!(d[,1]>180000&d[,2]<330500)]
head(dnew)
head(ynew)
# Find anchorpoints
a<-find_anchorpoints.lsm(dnew,12)
# Build the empiric variogram
vario<-variogram.lsm(ynew,dnew,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu<-findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11(height = 600, width = 800, ypos = -100, xpos = -100)
mypoints<-plot.lsm(model = solu, a = a, y = ynew,d = dnew, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
max(previsions$ypredicted - ynew)
previsions
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
head(dnew)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y<-meuse$cadmium
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
# Find anchorpoints
a<-find_anchorpoints.lsm(d,12)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$cadmium
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
x11()
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,350,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, y = y, d = d, n_points = 10, points_arrangement = "random")
previsions <- predict.lsm(solu, dnew, ynew, dnew)
previsions <- predict.lsm(solu, d, y, d)
max(previsions$ypredicted - ynew)
max(previsions$ypredicted - y)
# Test the performace of our model via cross-validation
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
library(LocallyStationaryModels)
