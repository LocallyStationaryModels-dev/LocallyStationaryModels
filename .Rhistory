library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
previsions <- predict.lsm(solu, d, y, d)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
?find_anchorpoints.lsm
?findsolutions.lsm
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
.libPaths()
install.packages('RcppEigen')
library(LocallyStationaryModels)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = FALSE)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = FALSE)
library(LocallyStationaryModels)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "random", bool = TRUE)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 4, points_arrangement = "straight", bool = TRUE)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 4, points_arrangement = "straight", bool = TRUE)
library(LocallyStationaryModels)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 4, points_arrangement = "straight", bool = TRUE)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 4, points_arrangement = "straight", bool = TRUE)
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 6, points_arrangement = "straight", bool = TRUE)
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 10, points_arrangement = "straight", bool = TRUE)
previsions <- predict.lsm(solu, d)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
previsions <- predict.lsm(solu, d)
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
# Plot of the solutions
x11()
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", bool = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", kriging = TRUE)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", kriging = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", kriging = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", kriging = TRUE)
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Clean the environment
rm(list = ls())
# Load the libraries
library(LocallyStationaryModels)
library(sp)           ## Data management
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
solu
previsions <- predict.lsm(solu, d)
max(previsions$zpredicted - y)
library(LocallyStationaryModels)
# Load the libraries
library(LocallyStationaryModels)
?cv.lsm
?predict.lsm
library(LocallyStationaryModels)
load("C:/Users/Giacomo/Desktop/PACS/simulation2.RData")
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(z,d,a$anchorpoints,46,8,15,"gaussian")
# Find the solutions of optimization problem
solu <- findsolutions.lsm(vario, "exponential", c(30,46,0.5,100),upper.bound = c(46,46,pi/2,250))
mypoints<-plot.lsm(model = solu,a, n_points = 12, points_arrangement = "straight", bool = F)
mypoints<-plot.lsm(model = solu,a, n_points = 12, points_arrangement = "straight", kriging = F)
d
solu$delta
# Find the solutions of optimization problem
solu <- findsolutions.lsm(vario, "exponential", c(30,46,0.5,100),upper.bound = c(46,46,pi/2,250),lower.delta = 0.1)
solu$delta
# Find the solutions of optimization problem
solu <- findsolutions.lsm(vario, "exponential", c(30,46,0.5,100),upper.bound = c(46,46,pi/2,250),lower.delta = 0.1,upper.delta = 2)
#plotvario(vario,3) # a
# Plot of the solutions
x11()
mypoints<-plot.lsm(model = solu,a, n_points = 12, points_arrangement = "straight", kriging = F)
solu$delta
vario <- variogram.lsm(z,d,a$anchorpoints,0.14,n_angles = 8,n_intervals = 16,"gaussian",n_threads = 16)
solu <- findsolutions.lsm(vario, "exponential", c(0.012,0.01,pi/4,3),upper.bound = c(0.091,0.091,pi/2,Inf))
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",bool = F)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F)
solu <- findsolutions.lsm(vario, "exponential", c(0.012,0.01,pi/4,3),upper.bound = c(0.091,0.091,pi/2,Inf),lower.delta = 1)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F,ellipse_scale = 0.1)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F,ellipse_scale = 10)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F,ellipse_scale = 4)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F,ellipse_scale = 2)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F,ellipse_scale = 2)
mypoints<-plot.lsm(model = solu, a = a, n_points = 10, points_arrangement = "straight",kriging = F,ellipse_scale = 2,arrow_scale = 2)
